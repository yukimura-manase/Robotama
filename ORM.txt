
< O/Rマッピング (Object/RDB mapping)とは何か？ 必要か不要か？ SQLインジェクションとの関係性 >


[ 引用: O/Rマッピング（O/Rマッパー / ORM）とは ]

    1. O/Rマッピングとは、オブジェクト指向プログラミング言語におけるオブジェクトとリレーショナルデータベース（RDB）の間でデータ形式の相互変換を行うこと。
    
    そのための機能やソフトウェアを「O/Rマッパー」（O/R mapper）という。


    2. オブジェクト指向言語では互いに関連するデータ項目を一つのオブジェクトにまとめ、データを操作する手続き（メソッド）と一体的に管理する。
    
    一方、リレーショナルデータベース（relational database）では一件のデータを複数の属性の値の組として表現し、組を連ねた表の形でデータを永続的に保存する。


    3. プログラムからRDBへデータを保存するには、オブジェクトを実体化したインスタンスの持つ値をデータベースの表中の項目に当てはめて書き込む操作（読み込みの場合はこれとは逆の操作）を行なうが、
    
    通常はデータベース管理システム（DBMS）へ操作を依頼するSQL文などを生成・発行するコードをプログラム中にその都度記述しなければならない。


    4. O/Rマッパーはこの処理を専門的に受け持つもので、あらかじめ設定された対応関係についての情報に基づき、
    
    インスタンスのデータをデータベースの対応するテーブルへ書き出したり、データベースからデータを読み込んでインスタンスに代入したりといった操作を自動的に行なってくれる。



[ ORM 何の略？ ]

    オブジェクト関係マッピング（英: Object-relational mapping、O/RM、ORM）とは、
    
    データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法である。 
    
    オブジェクト関連マッピングとも呼ぶ。



[ マッピングとは何ですか？ ]

    マッピングとは、ある項目に対して、別の項目を位置づけたり、割り当てたりするルール、規則のこと。 
    
    例えばデータのインポートなどで、違うデータ項目を同一項目として関連付ける作業をマッピングという。 
    
    マッピングには、不具合を生じさせないため、特定の規則に従った対応付けや割り当てを行なう。

    「マッピング」とは？ | マーケティング用語集



[ オブジェクト関係マッピング（O/Rマッパー）の不要という議論 ]


1. セキュリティ上の配慮から、ORMは総論としてあったほうがいいと思う派です。


[ セキュリティ面 ]

    1. SQLインジェクション対策

    ORMでは、複雑さを取り除くために、別の複雑さが発生するという部分がありました。


    生産性をとるためのトレードオフをするかしないかという、葛藤がありました。


    一方でときは流れ、SQLインジェクションなる（当時）未知なる脅威が生まれてきます。


    入力項目に見込んでいたSQLとは異なる変数を強制的に代入して、意図されていない情報を引き出す手段です。


    2. 入力は汚染されている前提で設計せよ

        直接SQLを叩いたほうが生産性が高い場合は、よくありますが、ユーザー（Botかも知れません）の様々な入力に耐えうるプレースホルダを自作するのは、あとから効率的でなくなります。


        「入力は汚染されている前提で設計せよ」


        SQLを使うプログラマーにとっては、同時に入力情報の安全性を加味しなければならなくなりました。

        
        それをどのレイヤーで担保するかは、プログラマーに委ねられる形になっています。


        エスケープ文字はないか、SQL文を代入されていないか、予期している型通りの入力か、最大値を超えていないか等について開発者が注意する必要が出てきました。


        入力フォームに工夫するか、Javascriptで入力を監視するか、RDBの設定を変更するか、
        CGIのレベルで入力チェックするか、手段はたくさんあります。


        オブジェクトとして汎用的に捉えるのであれば、SQLを発行するタイミングに工夫することが考えられます。


    3. ORM以外のカスタムSQLアプローチが向いている処理

        さいごにORMの例外について書きます。


        明らかに安全なデータを内部で回す場合のバッチ処理などで、自作のSQLを直接たたくのは正解だと思います。







[ 引用 => Wikipedia: SQLインジェクション ]

    SQLインジェクション（英: SQL injection）とは、アプリケーションのセキュリティ上の不備を意図的に利用し、アプリケーションが想定しないSQL文を実行させることにより、

    データベースシステムを不正に操作する攻撃方法のこと。

    また、その攻撃を可能とする脆弱性のことである。

    SQLに別のSQL文が「注入 (inject)」されることから、「ダイレクトSQLコマンドインジェクション」もしくは「SQL注入」と呼ばれることもある。





[ 引用: ORMとはなんぞや ]


1. ORM (オブジェクト関係マッピング) とは


    ORMとは、Object-Relational Mappingの頭文字をとったものです。

    その名前からわかる通り、オブジェクトと関係（関係データベース、RDB）とのマッピングを行うものです。

    ここでの、オブジェクトとはオブジェクト指向におけるオブジェクトのことであり、関係とはRDBのことです。


    多くのプログラミング言語はオブジェクトを扱うので、そのオブジェクトをRDBに保存できるように、対応付けを簡単にするためORMを使います。

    もっと簡単にいうと、SQLを直接書くことなく、オブジェクトのメソッドでDB操作ができる、ということです。

    例えば、createメソッドで新規作成を行ったり、destroyメソッドで削除する、といった感じです。

    また、DBの作成やマイグレーションといったDB操作もORMで行うことができます。


    ORMを使った例を一つ示します。

    RailsのActiveRecordを使って、ユーザー一覧を取得する場合を考えます。

    SQLで書く場合、SELECT文で取得します。

        SELECT * FROM users;

        一方、Railsの場合はallメソッドを呼ぶだけです。

        users = User.all


    各言語の有名ORM

    それぞれプログラミング言語ごとに、ORMのライブラリがいくつか提供されています。

    Ruby on RailsなどのWebフレームワークに、搭載されている場合もあります。


    言語	ORM	
    Ruby	ActiveRecord	Ruby on RailsのORM
    Python	SQLAlchemy	
    Python	Django ORM	DjangoのORM
    Node.js	Sequelize	
    Node.js	TypeORM	
    PHP	Eloquent	




[ 引用: SQLインジェクションを防ぐ 〜5 ]


1. ORMレイヤーを使用する

    オブジェクトリレーショナルマッピング（ORM）レイヤーの使用の検討も推奨しています。

    ORMレイヤーは、データベースからのデータをオブジェクトに、またはその逆に変換します。

    ORMライブラリを使用すると、明示的なSQLクエリを減らすことができ、SQLインジェクションに対する脆弱性を大幅に低減できます。



[ 引用: O/Rマッパーを使う理由 ]


1. O/Rマッパーとは

    データベースとオブジェクト指向プログラミング言語の間の非互換なデータを変換するプログラミング技法である。


    オブジェクト指向とデータベースの考えの差分を吸収して、どっちでもいい感じに使えるようにする技法。

    では、何故この技法が生まれたのかを理解していく。



2. 登場した背景

    オブジェクト指向言語で、リレーショナルデータベース（以下データベースとする）を使う時に、
    
    取得してきたレコードをオブジェクトにマッピングする作業が必要になります。
    
    わからない人向けに手動マッピングのコード例を貼っておきます。

    ※以下のコードはかなりいい加減なのと、適当にコピってきたなので、流し読みしてください


        Connection conn = null;

        try {
        conn = DriverManager.getConnection(url, user, password);

        Statement stmt = conn.createStatement();
        String sql = "SELECT id, first_name FROM users";
        ResultSet rs = stmt.executeQuery(sql);
        List<User> users = new ArrayList<User>();
        while(rs.next()) {
            User user = new User();      
            // usersテーブルのid を UserクラスのIdフィールドに入れる（マッピング）
            user.setId(rs.getString("id"));
            user.setFirstName(rs.getString("first_name"));
            users.add(user);
        } 
        }catch (SQLException e){
        out.println("SQLException:" + e.getMessage());
        }


    こういったマッピングを毎クエリ書く必要が出てきます。
    
    これはオブジェクト指向言語が悪いとか、データベースが悪いという話ではなく、
    
    設計のズレ。これをインピーダンスミスマッチと言います。


        リレーショナルデータベース設計： 検索や登録更新処理に最適なモデル定義
        
        オブジェクト指向設計：データモデルを現実世界のモデルに即したものとして定義


    そもそも、思想が違うので、どちらかの思想が合わせるといったことすると、不都合が起きることは当然ですよねっていうことはこの時点でわかる。
    

    それらの不都合を解決するために出てきたのがO/Rマッパーです。



3. O/Rマッパーがない世界感

    SQL にはオブジェクト指向を考慮した設計はなされていないため、
    
    SQLを扱おうとすると、オブジェクト指向にある柔軟性のメリットが無に帰すわけです。
    
    
    どういうことか？

    何かのSQL構築したいと考えた場合、オブジェクトに入れたデータをデータベースに保存するために、
    
    一旦オブジェクトからデータを抜き出し、SQLを構築する専用メソッドが必要があります。
    
    
    これだけでもだるい作業なのですが、
    
    もし、データベース側でカラム名、型の変更があった時に、SQL作成部分のコードは毎度実装修正する必要が出てきます。
    （再利用性とは・・・状態）



    また、マッピングを書く処理は非常に単調で退屈なコードです。
    
    しかし、これを間違えると普通に事故ります。
    
    しかも、型が同じであればそれっぽく動いたりもするので、これを人間が手作業で全部やるのは辛い。
    （コードジェネレーターで解決するという手もありますが、今回は割愛）



4. 使うことで得られるメリット

    よくあるO/Rマッパーは、オブジェクトを作成して、データベースのデータを更新するメソッドに渡すだけで、
    
    あとはそのメソッド内で、クエリ作成に必要なマッピングを中でやってくれます。


    もし、フィールドを増やしたい減らしたいといったことが起きても、updateメソッドに渡すオブジェクトに変更加えるだけで済みます。
    
    このメリットはレコードを取得する時にもです。

    ちなみに、マッピング情報をxml形式で書いたり、アノテーションで定義をすることが多いです。
    
    面倒のように思えますが、そこさえ書けていれば、コードを書く時はオブジェクトを扱うように操作が出来るようになります。

        User user = new User();  
        user.setId(1);
        user.setFirstName("hoge");

        // いい感じに変換してくれる（型解釈や構文の構築など）
        // UPDATE users SET first_name = 'hoge' WHERE id = 1
        db.update(user);


5. SQLを考えなくてよくなる？


    オブジェクト指向言語からオブジェクトをそのまま扱うような感覚でデータベースを扱うことが出来るようにしたのが、O/Rマッパーですが、
    
    だからといってSQLを知らなくていいというわけではありません。
    
    
    これはどういったクエリが発行されているのか？
    
    は理解しておかないと、
    
    「スロークエリ」や「N + 1問題」といった問題に対して何も出来なくなってしまうので、精通しているまではやらなくても、読めるようにしておくことは必須です。


    そもそも、O/Rマッパーが登場した背景には、SQL理解しなくても使えるようにではなく、
    
    分かっていることを何度も書かないで済むようにしたいや、
    
    オブジェクト指向とリレーショナルデータベースのメリットを最大限発揮するために考えられたものなので、知らなくていいやという話ではないのです。




[ 引用: ORMとは？ ]


1. ORM (Object Relational Mapper)とは

    ORMは、簡単に言えば、RDB（Relational Database: 関係データベース）に対するデータの操作を
    
    オブジェクト指向型言語（Object-Oriented Programming Language: OOP[1]）のやり方で扱えるようにするための手法と言えます。


    具体的には、RDBに対する操作がカプセルかされたORM用のライブラリを使用し、これがSQLの生成などを背後で行ってくれます。
    
    DBのテーブルはクラスと紐づけられ、オブジェクトに対する操作をすることでデータの操作を行います。
    
    これにより、SQLを書く手間を省くことが可能です。

    さらに具体的に、RDBとオブジェクト指向言語の違いを簡単にまとめてみます。


2. RDBでの表現

    例えば、Person表にID、Name(名前)、PhoneNumber（電話番号）があるとします。RDBで正規化すると、次の2通りのテーブルができそうです。

    個人の場合、現住所、連絡先、勤務先、家族の連絡先など、複数の連絡先を記録することもあり得ますので、連作先だけを別テーブルとして正規化する作り方もあるでしょう。

    データを更新する場合、テーブルごとにINSERTなりUPDATEを発行する必要があります。



3. オブジェクト指向言語での表現

    オブジェクト指向言語（もしくはPythonのようなオブジェクト指向の要素を取り入れた言語）では、インスタンスがプロパティやメソッドを持ちます。

    Personクラスがオブジェクト化されたPersonオブジェクトがあるとして（これがRDBのレコードに対応する）、
    
    ID、名前、電話番号リスト（List型）を、内部変数・公開メソッドの形で持つ形になります。


    更新する場合は、メソッドに値を代入するなりします。


    アプリ側（オブジェクト指向言語）とDB側ではデータの在り方も、それに対する処理の方法も異なります。


4. ORMを使わない場合どうなるか

    まず1点目として、DBへの操作は動的SQLで行う必要がありますが、これが厄介です。

    文字列型の変数の中にSQL文を都度生成して実行する都合上、文法レベルのエラーでさえ、SQLを実行する箇所を走らせるまで分かりません。

    また、Visual Studio Codeだとコーディング中に文法エラーがある箇所は画面で指摘してくれますが、それもできません。なので、開発効率が良くありません。

    2点目として、DBに対する操作は、Python言語とは、まったく違う言語体系であるSQLで書く必要があります。


    上の図のうち、表が2つある場合で言えば、新規のデータを追加する時、Person表に対するINSERT文、PersonPhoneNumber表に対するINSERT文の、2つのINSERT文の発行が必要です。
    
    これに対し、ORMだと1つのオブジェクトに対する操作で済みそうですね（あくまで単純な例ですが）。



5. ORMのメリット

    大きくは、以下の通りでしょうか。

        1. SQLを書かなくてよい

        2. オブジェクト指向型言語で書ける

        3. RDBへの処理がカプセル化されている


    SELECTやINSERTといったDB操作がPytonだけのコードで記述できるのは、嬉しい点です。

    ORMを使用することで開発効率向上に寄与できる場面は、それなりにあると思います。



6. 課題

    課題（というか問題）もあります。

    ネットの評判を見るに、賛否両論という印象でしょうか。

    私なりのまとめ方にはなりますが、以下の通りです。

        1. ORMツールの使い方を覚えないといけない

        2. 内部の挙動が把握しにくい（SQLのチューニングに課題）

        3. SQLもDBMS製品ごとに方言がありますが、ORMツールを使う場合でもツールの使い方を覚えないといけません。


    また、ORMツールも最終的にはSQL文を生成するものですが、カプセル化されているがゆえに挙動が把握が困難ですので、
    
    SQLレベルのパフォーマンスチューニングの際は、結局SQLを直接確認しないといけません。

    アプリ開発の場面では、逆に手間になる可能性もあります。



7. ORMではなくストアドを使用するのも1つの方法

    ストアドとはOracleで言うとPL/SQLで書かれたDB内部のプログラムですが、PostgresSQLにも、Microsft SQL Serverにも同様の機能が存在します。

    ストアドは「手続き型言語」にはなりますが、SQLをベースにした文法であり、単発のSQLでは書けない複雑な一連の処理を定義することができます。


    既にSQLは理解していて「SQLよりも複雑な処理が必要」という動機であれば、
    
    ORMではなくストアドを使用するのも一つの方法です（※ストアドができれば、後はそれを呼び出すだけでよい）。


    Wikipedia上のORMの解説（英語版のほう）にも、同様の説明がされていますね。[3]

    ストアドは、企業向けのアプリケーションではよく使用されていると思うので、馴染み深いと思います。




< 参考・引用🔥 >

1. O/Rマッピング（O/Rマッパー / ORM）とは
https://e-words.jp/w/O-R%E3%83%9E%E3%83%83%E3%83%94%E3%83%B3%E3%82%B0.html


2. O/Rマッパーは不要なのでしょうか？::SQLインジェクション対策「入力は汚染されている前提で設計せよ」
https://omiyan.hatenadiary.org/entry/20110203/p1


3. SQLインジェクション
https://ja.wikipedia.org/wiki/SQL%E3%82%A4%E3%83%B3%E3%82%B8%E3%82%A7%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3



4. SQLインジェクションを防ぐ 〜5
https://qiita.com/bricolageart/items/1532b73057a260aaa755




5. ORMとはなんぞや
https://utouto97.hatenablog.com/entry/2021/07/21/224759



6. O/Rマッパーを使う理由
https://tikasan.hatenablog.com/entry/2018/08/06/110000



7. ORMとは？
https://zenn.dev/myuki/books/02fe236c7bc377/viewer/d2422a#rdb%E3%81%A7%E3%81%AE%E8%A1%A8%E7%8F%BE








