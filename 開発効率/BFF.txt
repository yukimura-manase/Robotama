

< BFFとは何か？ >

    [ Use Case ]

        仕事で「複数のバックエンド」から「一つのクライアント」と疎通するような構成の可能性があり、BFFが使えるかもということで調べてみました。

    [ 概要 ]
            
        BFF(backend for frontend)とは簡単にいうと、クライアントとバックエンドの中間に位置し双方の複雑性を吸収するような作られたサーバーのことです。

        FrontEnd のための BackEnd

    [ 背景 ]

        これが必要になった、背景はクライアントの端末の種類が増加したことそれに伴うロジックの増加です。

        例えばweb,スマホ版web,スマホアプリ、デスクトップアプリなど複数のクライアントが登場し、それぞれにメッセージやコンテンツの出しわけを実装しようとすると、クライアント側のコードが複雑化し、冗長なコードを書かざる追えない状態になります。

        そういった背景から、複数のバックエンドから情報を取得し適切な形に整形するなどのロジックを持つサーバーを導入することで、クライアントはUI/UXに注力するようにしたのがBFF登場の経緯です


    [ BFFのメリット ]

        1. APIの集約

            シンプルにクライアントはBFFに対してのみAPIを投げればよく、複数のバックエンドに対しての対応や加工などをクライアント側が気にしなくてよくなります。
            
            また、バックエンドからの複数のレスポンスをクライアントが求める形に適切に加工して返すことができるので、クライアントの処理も少なくできます。


        2. バックエンドの差異の吸収
            
            例えば、バックエンドの一部がgRPCで他がRESTで他がWebsocketなどのバックエンドの仕様や差異などを全て吸収できるので、複数の種類のバックエンドに対応できます。


        3. フロントエンドとバックエンドの分離

            バックエンドとクライアントが直接通信を行う場合そのプロトコルは一致させないと行けませんでしたが、
            
            BFFを挟む場合は「 BFF <-> クライアント 」と 「 BFF <-> バックエンド 」は全く別の通信になるので、 
            
            「 BFF <-> クライアント 」のみ GraphQLで 「 BFF <-> バックエンド 」は RESTとのような柔軟な調整ができます。


        4. 複数にまたがる関心の分離
            
            雑な言い方ですが、BFFに認証や、権限、キャッシュなど処理を置くことで、クライアントサイドとバックエンドサイドにまたがるような処理を取り去りシンプルな形で保つことができます。




    [ BFFのデメリット ]


        1. サーバーの開発と保守の手間
        
            BFFもソースコードを持ち、実際に動くサーバーのため、それらに対する監視やデプロイなどの手間が当然増えます。

        2. デプロイのタイミング

            BFFはバックエンドと密にやりとりをするため、例えばバックエンドのAPIの仕様変更をした場合BFFも変更して同時にデプロイしないと障害の原因になります。
            
            そういったデプロイに対して考えることが増えます。

        3. 通信量の増大と遅延
            
            通信が増えるため、通信量が増大し、データを取得するために必要な経路が増えるためデータ取得にかかる時間は当然増えます。
            
            なので相応の増強や対処が必要になります。

        4. コードの冗長化
            
            BFFが持つAPIとバックエンドが持つAPIの機能がほぼ一致するケース、例えばユーザー一覧の取得APIなど、機能や関心ごとが一致する場合はほぼ同じコードを書かないと行けないため、コードが冗長化します。



    [ 実装方法 ]
        
        仮にバックエンドがRESTの場合BFFは、routingとHTTP-Requestの機能さえ持っていればBFFは実装できます。
        
        クライアントとバックエンドの疎通の条件にもよりますが、ただ実装するだけなら難易度はそんなに高くないと思います。

        複数のプロトコル対応やクライアント間をgraphQLでしたい場合は EnvoyやApolloなどサーバーを適切に考えないと行けないです。


< 参考・引用 >
1. BFFとはなんなのか？ => https://qiita.com/souhei-etou/items/d5de99bb8cba1c59d393

-------------------------------------------------------------------------------------------------------------------------------------------------------


< BFF とは？ >

    BFF とは、Backend For Frontendの略称で、「フロントエンドとバックエンドの中間に配置され双方の複雑な処理を緩和させる責務を持つアーキテクチャ設計パターン」のことです。
    
    これだけだと分かりづらいので簡単にまとめると、「バックエンドの API から取得したデータをフロントエンド向けに加工するフロントエンド専用のサーバー(API Gateway)」です。


    マイクロサービス化や Web アプリケーションと iOS アプリケーションなどを両立させる際、API サーバーへのリクエスト負荷やレスポンスのパターン増加による処理の複雑化などの課題が発生します。
    
    そこで中間に BFF レイヤー(階層)を配置することで、フロントエンドとバックエンドの連携における処理が分散され、アクセスフローがシンプルになります。



    [ 導入すべきケース ]


        前述しましたが、BFF は「マイクロサービス化における課題を解決するためにできたアーキテクチャ」という側面を持っているため、
        
        マイクロサービス且つフロントエンドにおける実装は複雑化してきた段階で検討するのが良いと思います。
        
        導入時は、フロントエンド、BFF、バックエンドそれぞれが持つ責務を明確に定めた上で、開発していくと本来の責務から外れてより複雑化するといった問題が発生しづらくなります。





    [ BFF のメリット・デメリット ]

        メリット

            フロントエンドとバックエンドが持つ責務の分離できる

            フロントエンドで API からデータ構築するコストをバックエンドに委譲できる

            レスポンスをフロントエンドが扱いやすい形にすることで処理を簡略化できる

            フロントエンドに合わせた仕様にできるため、依存の広がりを抑制できる
            
            バックエンド要因によるブロックが無くなり、開発体験を向上


        デメリット
            
            開発コストと運用コスト（メンテナンスや監視など）が増加する

            API 結合による通信量の増加と遅延が発生する可能性がある

            アクセスの一元化によってサーバー障害によるリスクが増加する

            バックエンドに依存するため、デプロイなど連携が必要


    [ 技術スタック事例 ]
            
        1. GraphQL / NestJS


            BFF は前述した通り、フロントエンド開発を補助する側面が強いため、フロントエンド側に合わせた値を返せる「GraphQL」との相性は良いです。
            
            また、BFF はバックエンドを呼び出してフロントエンド向けに加工する以外のロジックは基本的に存在しないため、
            記述量が少なく、フロントエンドエンジニアが開発をしやすいTypeScript で書けるフレームワーク「NestJS」が採用候補になりました。
            
            NestJS であれば、GraphQL に関するプラグインが豊富で導入も容易です。

            GraphQL を採用する際は、スキーマファーストとコードファーストのどちらを採用するかという課題に必ず直面します。
            
            個人的には、BFF はフロントエンドエンジニア側が開発を担当することになるため、スキーマとコードを同期させて開発するスキーマファーストのより、
            コード管理だけで済むコードファーストの方が BFF の思想的にマッチしているように感じました。


            そもそも NestJS とは？
            NestJS とは、「Node.js のサーバサイドフレームワーク」です。特徴は以下の通りです。

                TypeScript に対応しているため、保守が容易なアプリケーション開発が可能
                REST API、GraphQL の両方に対応している
                拡張性が高く柔軟な実装ができる
                公式ドキュメントがわかりやすい
                Angular ライクな開発


            モダンなフロントエンド環境で採用率の高い TypeScript で書けるため、フロントエンドエンジニアも参入しやすく、キャッチアップが比較的容易です。
            
            個人的には、拡張性の高さとバックエンドとフロントエンドにおける型定義の一元化を容易にできる点も良いと感じています。




< 参考・引用 >
1. 流行りのBFFアーキテクチャとは？｜Offers Tech Blog => https://zenn.dev/offers/articles/20220418-what-is-bff-architecture
