
< VSCode-debug-手順 > 

1. 左側から「 実行とデバッグ 」メニューを選択！

2. debug-targetとなるプロジェクト以外のWorkSpaceに「 .vscode 」dir & 「 launch.json 」が残っている場合は、削除する！

3. launch.jsonファイルを作成しますをClick!

    => WorkSpace を select => debug-Browser を select

4. "webRoot" の value にPathを通す！

   [ 具体例 ]

        "webRoot": "${workspaceFolder}/src"

            workspaceFolder => ルートdir

            debug対象のdirまでのPathを指定する！


---------------------------------------------------------------------------------------------------------------------------------------

< Visual Studio CodeでのJavaScriptのデバッグ方法 >


    マイクロソフトが無償で提供しているコードエディター「Visual Studio Code（略称：VS Code）」はGoogle ChromeやMicrosoft Edgeのデバッグ機能と連携できます。

    VS Code上でブレークポイントを設定してコールスタックを確認したり、ステップ実行や変数のウォッチなどを行えます。
    
    複雑なJavaScript開発を行っている方は、デバッグ機能を使うことで、効率のよい開発体験を得られるでしょう。


1. 導入手順と前提


    VS Codeにはデフォルトでデバッグ機能が搭載されています。

    ※2021年8月以前のVS Codeでは拡張機能「Debugger for Chrome」の導入が別途必要でしたが、今のVS Codeでは拡張機能をインストールする必要はありません。

    本記事では、ウェブページのデバッグ方法として、http://のURLを扱う方法で説明します。

    昨今のウェブ制作では、localhostでウェブサーバーを立ち上げることが多いでしょう。

    たとえば、VS Codeの拡張機能『Live Server』を使うと、HTMLファイルからローカルサーバーを手軽に立ち上げられます。


    シンプルなHTMLでデバッグを試そう
        
    以下のHTMLファイルを題材に説明します。
    
    ボタンを押したら、単純な数値計算をするというJavaScriptが記載されています。サンプルはGitHubにて公開しています。

    ブレークポイントとは、プログラムの実行を止めたい場所のことです。
    
    JavaScriptファイルの追跡したい箇所にブレークポイントを仕込みます。
    
    ブレークポイントは行番号の箇所をクリックすることで、有効になります（赤丸が目印です）。



2. 構成ファイルの作成


    サイドバーから［デバッグと実行］を選択し、.vscode/launch.jsonファイルを作成しましょう。

    構成ファイルは、デバッグに必要な設定情報を定義したものです。
    
    見慣れない記述が多く戸惑うと思いますが、編集すべき箇所はURLのパスです。
    
    「🌟ここを編集」とコメントしている箇所に注目ください。



Visual Studio CodeでのJavaScriptのデバッグ方法
https://ics.media/entry/11356/

---------------------------------------------------------------------------------------------------------------------------------------




