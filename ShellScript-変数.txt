
< Shell-Scriptでの変数の使い方 >


1. 変数を作成・代入する！

    実際に変数を作成、代入してみよう。

    シェルスクリプトを作らなくても実験できる。
    
    Linuxのシェルはインタプリタなのでその場で変数の宣言や参照が可能なので、とりあえずいつものようにコマンドを打つ場所で次のように打ってみよう。

        $ STRING=hello_world

    とすると「STRING」に「hello_world」代入される。

    このとき「=」の右辺、左辺ともにスペースをいれてはいけない。

    「=」のところに空白をあけるとSTRINGが変数ではなくコマンドとして誤解されるためだ。

    次に値を参照してみよう。


2. 変数を参照する！


    変数名の前に「$」をつけることで中身の値を参照できる。
    
    例えばさきほどのSTRINGに$をつける「$STRING」とすると中の値が参照できる。単純に中身を確認したい場合は「echo」を使うとよい。

        $ echo $STRING

    とするとhello_worldと表示されるはずだ。

        root@Robotama-1:~# robotama="ロボ玉"
        root@Robotama-1:~# echo $robotama
        
            ロボ玉


3. 変数名のルール

    変数を作成するとき、基本的に任意の名前をつけることが出来るが幾つかの例外があるので気をつけていただきたい。

    例外のルールは以下の二つだ。

        1. 英数字と_を使用すること => 英数字 and 「 _ 」

        2. 先頭に数字をもってきてはいけない => すでに特別な変数が用意されている！ => 「 $0 」や「 $1 」、「 $2 」など。

    この二つをまもっていればユーザが任意の変数名をつけてよい「 」(スペース)「-」ハイフン)なども使えないので気をつけよう。
    
    また大文字小文字は区別される。

    ほか気をつけるというと変数のネーミングだ。

    変数名の付け方に厳格なルールはないが、「その変数がなにを目的につくられているのか？」ということを意識して名前をつけよう。
    
    昨今では補完入力環境が整っているため、長い名前の変数にしても問題にならないことが多い。
    
    他人が読むにしろ、自分が読むにしろ、わかりやすい名前の方が可読性が高まる。

    逆に一文字の変数などはループの数を数えるカウンタぐらいだろう。


4. 実行時の引数に関して => 特別な変数が存在する！ => $1 と $2 は、Shell-Scriptの特殊変数

    実行するとき「スクリプトの状態を保持する変数」が存在します。

        $0　スクリプト名
        $#　渡されたパラメータの個数
        $$　プロセスID
        $1,$2,..$N　パラメータ
        $* クリプト実行時、指定されたパラメータ全てが設定される変数。
        $@　基本的に$*と同じ、“”で囲んだときの展開の動作が違います。


    これらを使用すると与えられているコマンドライン引数が把握できる。

    実際にわたされたパラメータは幾つか、値はどうなのか？などの情報である。
    
    特にスクリプトにわたされた引数などを使用したいときによく使うので、あたまの片隅にいれておこう。

        => $1, $2 ・・・などの Parameter(引数)は、Shell-Scirpt上でよく使用する！


5. 変数の範囲

    bashシェルスクリプトの場合、変数は基本的にグローバル変数だ。
    
    グローバル変数とはどこからでも使うことができる変数のことをいう。


6. 配列を使う場合

    こちらも少し高度になる。プログラムには配列と呼ばれるものがよく使われる。箱が並んだものだ。

    配列とは「変数の塊」だ。
    
    これも繰り返し処理と組み合わせると力を発揮する。


    1. 配列の定義-構文

        $ LIST_1=(aa bb cc)

    とすると配列な変数が作成できる。


    2. 配列の値を参照する！
    
    値を参照するときは

        $ echo ${LIST_1[0]}

        $ echo ${LIST_1[1]}

        $ echo ${LIST_1[2]}

    などとすると参照できる。
    
    aa bb ccがそれぞれ箱に入って、[0]で0番目の箱の値が、[1]で1番目の箱の値が、[2]で2番目の箱の値が取得できる。


    配列の要素へアクセスするために｛｝で変数を囲むことに注意しよう｛｝をなくしてしまうと配列の先頭の値と[0]などが連結された値が出力されてしまうからだ。


7. 「declare」と「typeset」

    この２つのコマンドは名前が違うが同じ動作をするのでどちらを使用してもかまわない。

    今回は「declare」を使用することにする。
    
    declareを使う場合は「明示的にその変数が何を入れる変数なのか」を示すときに使う。
    
    数字なのか、配列なのか、などだ。

        $ declare -i NUM=1

    などとして使う、今回はNUMを数値の変数として決め打ちするために「-i」オプションを使用した。他


        -a　変数を配列とする
        -f　変数を関数とする
        -i　変数を数値とする。
        -r　変数を読み出し専用とする。
        -x　変数をエクスポートする。
        -p　変数の値を表示する。

    などがある。



【初心者〜中級者向け】シェルスクリプトの変数の使い方まとめ
https://eng-entrance.com/linux-shellscript-variable

