< 正規表現の練習に最適！ >
「Scriptular」(JS向けの動作確認サイト) => https://scriptular.com/

< メールアドレスパターン >
let pattern = /^[\s\S\d]+@[\s\S\d]+\.[\s\S\d]+$/;

「マッチ確認済み」
robo@gmail.com
robo-tama@gmail.com
robo12@email.com
robo..12tama@co.jp

< 電話番号パターン >
let pattern = /^0\d{1,3}-\d{1,4}-\d{4}$/;

「マッチ確認済み」
0277-55-1179
090-1846-3179
0890-1212-1212





ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

< バリデーション(validation)とは？ >
バリデーション(validation)とは、検証、実証、認可、妥当性確認(確認)、などの意味を持つ英単語

バリデーションとは、入力されたデータが、あるいはプログラミング言語やマークアップ言語の記述が、規定された文法に即して、または要求された仕様にそって、
適切に記述されているかどうかを検証することである。

多くの場合、プログラミング言語においてフォームなどに入力された文字列が「入力規則」に対して妥当に記述されているかどうかを検証する仕組みを指す。
記述が妥当でない場合はエラーとして値を返すように設定される。

< 正規表現とは？ >
1.正規表現とは、「パターン」(法則性)を記したものである！

正規表現とは、、、文字列内で文字の組み合わせを照合するために用いられるパターンです。
 1.文字の組み合わせを照合(マッチ)するために用いられるパターン
 2.JavascriptではRegExpオブジェクトとして扱われます！ => Regular expression：レギュラーエクスプレッション(規則性のある表現)

本質は「パターンを指定して、文字列を効率よく検索・置換するためのミニ言語」
=> 「正規表現」(パターン)と「オプションフラグ」から構成されているミニ言語

 < 正規表現を使用する場面 >
 1.入力値が正しいフォーマットかチェック！
 2.統一のフォーマットに変換する！
 3.URLに応じて表示する情報を切り替える！
 etc...


< 正規表現パターンの記述 >
 正規表現パターンは、/abc/ のような単純な文字、または /ab*c/ や /Chapter (\d+)\.\d*/ のような単純な文字と特殊文字との組み合わせからなります。


<正規表現の記法・書き方> => 2種類ある。

 ① リテラル記法
[構文] 
let regex = /正規表現(パターン)/オプションフラグ
const regex = /[^0-9]/g 

[書き方]
/ パターン / オプションフラグ

注意:正規表現リテラルでは「/」(スラッシュ)は正規表現パターンの「開始」と「終了」を表す予約文字である。
「/」 => 正規表現パターン予約文字

したがって、正規表現パターンに「/」を含むものには、「\」(バックスラッシュ)で「\/」こんな感じでエスケープする必要がある。
「\」(バックスラッシュ)も予約文字である。したがって、「\」を認識させるのには「\」を、「\\」としてエスケープする必要がある。

 ② コンストラクタ記法　=> RegExpオブジェクトのコンストラクターを経由する！
 [構文] 
 
 const regex = new RegExp('正規表現','オプション');
 const regex2 = new RegExp('[^0-9]','g') 
 
[書き方] 
new RegExp(パターン,オプション)

 注意:コンストラクター構文では、正規表現を文字列として指定している。


< 主なオプションフラグ >
 オプション	    説明
    g	     グローバルサーチのg => 文字列全体に対してマッチングするか（無指定の場合は1度マッチングした時点で処理を終了）
    i	     「大文字／小文字」を区別しない（無指定の場合は区別する）
    m	     複数行の入力文字列を複数行として扱う（^及び$が各行の先頭末尾にマッチする）
    u	     Unicode対応（漢字などを認識してくれるようになる）

< メタ文字・特殊文字 >
「メタ文字」(特殊文字)とはアスタリスク(*)やプラス(+)などのアルファベットではない特殊な文字ことです！

特殊文字を正規表現の中で使用するには、メタ文字の直前に「\」（バックスラッシュ）を付ける必要があります。

これを「エスケープする」または「エスケープ処理」と言います。

「escape」 => 逃げる。免れる。脱出する。

正規表現における「エスケープ」とは => 特殊文字をその正規表現での役割から脱出させる。免れさせると言う意味合いになります。

エスケープ処理を行うことによって、特殊文字の特別な意味が打ち消され、特殊文字自身を表すようになります。

正規表現でエスケープが必要な文字一覧 => 「特殊文字・メタ文字」一覧
具体的にエスケープが必要な特殊文字を記載します。

< 電話番号：初心者歓迎！手と目で覚える正規表現入門・その１「さまざまな形式の電話番号を検索しよう >

電話：090-1234-5678
\d\d\d-\d\d\d\d-\d\d\d\d
「半角数字3個、ハイフン、半角数字4個、ハイフン、半角数字4個」が並んだ文字列を検索したことになります。

\d は正規表現では特別な意味を持ちます。

こういった正規表現において「特別な意味を持った文字」を 「メタ文字」(特殊文字) と呼びます。

\d は「1個の半角数字（0123456789）」を意味するメタ文字です（文字の集合を表しているので、特に 「文字クラス」 と呼ばれます）。

普通の検索であれば \d は "\d" という文字列そのものを検索しますが、正規表現では \d は「1個の半角数字」を検索します。

今後、正規表現中に \d が出てきたら、「あ、これは半角数字を意味してるんだな」と頭の中で意味を変換してください。


[gはすべて検索するかどうかの指定] => g(グローバルサーチ)
g なし => 最初の1件が見つかったら検索終了
g あり => 一致する文字列をすべて抽出


名前：伊藤淳一
電話：03-1234-5678
電話：090-1234-5678
電話：0795-12-3456
電話：04992-1-2345
住所：兵庫県西脇市板波町1-2-3

これら4つの電話番号にはどんな法則があるでしょうか？
正規表現を使うときは、最初に検索対象文字列の 「法則（パターン）」 をうまく見つけだすのが大切です。

今回であれば、次のような法則があると言えそうです。

「半角数字が2個～5個、ハイフン、半角数字が1個～4個、ハイフン、半角数字が4個」

あとはこれを正規表現として表すことができればOKです。

< 超重要 >
[ {n,m}は、文字の個数を指定する ]
文字の個数を限定するときは {n,m} や {n} というメタ文字を使います（文字量を指定するので、特に 「量指定子」 と呼ばれます）。

{n,m} は「直前の文字が n 個以上、m 個以下」の意味です。また、 {n} とすれば「ちょうど n 文字」の意味になります。

よって正規表現は以下のようになります。

\d{2,5}-\d{1,4}-\d{4}

正規表現では { と } もやはり特別な意味を持つことを覚えておいてください。

ハイフンだけでなく、カッコにも対応する

さて、もう少しだけ電話番号の正規表現を考えてみたいと思います。

電話番号は次のように表記されることもあります。

ハイフンではなくカッコを使うケースです。

"03(1234)5678"

ハイフンが来ても、カッコが来ても、どちらでも電話番号を検索できる正規表現はあるのでしょうか？
大丈夫です。そういう場合も正規表現で検索できます！

名前：伊藤淳一
電話：03(1234)5678
電話：090-1234-5678
電話：0795(12)3456
電話：04992-1-2345
住所：兵庫県西脇市板波町1-2-3

今回もやはり法則（パターン）を見つけることから始めます。

今回の場合は、以下のような法則があると言えるでしょう。

「半角数字が2個～5個、ハイフンまたはカッコ（開き）、半角数字が1個～4個、ハイフンまたはカッコ（閉じ）、半角数字が4個」

新しく登場したのは「ハイフンまたはカッコ（開き）」と、「ハイフンまたはカッコ（閉じ）」という「AまたはB」のパターンです。

< 超重要ポイント >
「AまたはBのいずれか1文字」表す場合は [AB] と書きます（文字の集合を表すので、これも 文字クラス の一種です）。

[ ]の中の文字数に制限はありません。[ABC] と書けば、「AまたはBまたはCのいずれか1文字」の意味になります。

ハイフンまたはカッコ（開き）と、ハイフンまたはカッコ（閉じ）はそれぞれ、[-(]、[-)] と表現します。

記号だけが並んでいてちょっとわかりづらいですが、 [AB] の形式になっていることを確認してください。

これをふまえて正規表現を書き直すと次のようになります。

\d{2,5}[-(]\d{1,4}[-)]\d{4}

正規表現の知識がないと \d{2,5}[-(]\d{1,4}[-)]\d{4} は謎の暗号にしか見えませんが、ここまでこの記事を読んできた人であれば、メタ文字の意味と、メタ文字ではない普通の文字の区別が付くはずです。

ちなみに今回出てきた半角の丸カッコ（ ( と ) ）は、[ ] の外で使われると特別な意味を持ちます。

それについては次回以降の記事で説明する予定です。

やろうと思えば電話番号を使って、まだまだいろんな正規表現を試すことができるのですが、どんどん記事が長くなってしまうので、電話番号を使った正規表現はいったんここで終了します。

[ ] 中のハイフンは注意が必要

先ほどの正規表現では [-(] や [-)] と書いて「ハイフンまたはカッコ（開き）」と「ハイフンまたはカッコ（閉じ）」を表現しました。
一般的に [AB] は [BA] と書いても同じ動きになります。

ただし、- だけは特別な意味を持つので注意が必要です。
実は [a-z] と書くと、「aまたはbまたはcまたは・・・yまたはz」の意味になるのです。
「aまたはハイフンまたはz」ではありません！

同様に、[a-zA-Z0-9] であれば「aまたはbまたは・・・z、AまたはBまたは・・・Z、0または1または・・・9」の意味になります。（端的に言うと、これは「半角英数字1文字」の意味です）

つまり、[a-z] のようなのハイフンは「文字の範囲」を意味します。

ただし、[-az] や [az-] のように、ハイフンが [ ] の最初、または最後に置かれると「ハイフン1文字」の意味に変わります。

なので [-az] や [az-] は「aまたはzまたはハイフンのいずれか1文字」の意味になります。

[0-9] という正規表現を入力すると、半角数字のみにマッチします（つまり \d と同じです）。

一方、[-09] と入力すると、「0または9またはハイフン」にマッチします。

[ まとめ ]
本記事では正規表現について以下のようなことを学びました。

① \d は「半角数字1文字」を表す
② {n,m} は「直前の文字が n 文字以上、m 文字以下」であることを表す
③ {n} は「直前の文字がちょうど n 文字」であることを表す
④ [AB] は「AまたはBが1文字」であることを表す
⑤ [a-z] と [-az] ではハイフンの意味が異なる
⑥ 正規表現の正確さと複雑さはトレードオフになることが多い

< 初心者歓迎！手と目で覚える正規表現入門・その２「微妙な違いを許容しつつ置換しよう」 >

クープバゲットのパンは美味しかった。
今日はクープ バゲットさんに行きました。
クープ　バゲットのパンは最高。
ジャムおじさんのパン、ジャムが入ってた。
また行きたいです。クープ・バゲット。
クープ・バケットのパン、売り切れだった（><）

さまざまな区切り文字を許容する
前回は [AB] で「AまたはBのいずれか1文字」というメタ文字を紹介しました。
この知識を活用すると、次のように区切り文字を複数指定することができます。

クープ[ 　・]バゲット

画面上では非常にわかりにくいですが、[ ] の中身は半角スペースと全角スペースと中黒の三文字が含まれています。
これをRubularに入力してください。
そうすると3行目と5行目のテキストにもマッチするはずです。

濁点の有無を許容する
同じく正規表現を使って「バゲット」と「バケット」の両方にもマッチさせましょう。
もうおわかりかと思いますが、ここでも [ ] を使います。

クープ[ 　・]バ[ゲケ]ット

これで6行目のテキストにもマッチさせることができました。

しかし、1行目にある「クープバゲット（区切り無し）」にはマッチしていません。
これはどうやってマッチさせればよいでしょうか？


区切り文字の有無を許容する

まずは検索したい文字列のパターンを考えてみましょう。
今回は次のようなパターンになります。

「クープ、区切り文字（半角スペースまたは全角スペースまたは中黒）が1文字、もしくは区切り無し、バゲ（またはケ）ット」

新しく登場したのは「区切り文字が1文字、 もしくは区切り無し 」というパターンです。

< ポイント >
今回のように 「～が1文字、または無し」を表現するためには ? (ハテナ)というメタ文字を使います。（文字量を指定するので 量指定子 のひとつです）

? を使うと正規表現は次のようになります。

クープ[ 　・]?バ[ゲケ]ット

区切り文字を簡易的に表現する

さて、この正規表現はこれで完成！・・・としてもいいのですが、もうひとつ新しい知識を学習しておきましょう。

先ほどの正規表現の [ 　・] の部分ですが、「半角スペースまたは全角スペースまたは中黒」と厳密に文字種を指定しなくても、現実的には「任意の1文字」という考えで十分だったりします。

正規表現にはちょうど「任意の1文字」を表す . (ピリオド)というメタ文字（文字クラス）があります。

これを使うと先ほどの正規表現を次のように書き直せます。

クープ.?バ[ゲケ]ット


var text = "クープバゲットのパンは美味しかった。\n今日はクープ バゲットさんに行きました。\nクープ　バゲットのパンは最高。\nジャムおじさんのパン、ジャムが入ってた。\nまた行きたいです。クープ・バゲット。\nクープ・バケットのパン、売り切れだった（><）";

var lines = text.split(/\n/);

var targets = [];
for (var i = 0; i < lines.length; i++) {
  if (lines[i].match(/クープ.?バ[ゲケ]ット/)) {
    targets.push(lines[i]);
  }
}
targets;


HTMLタグをCSVへ変換する

<select name="game_console">
<option value="wii_u">Wii U</option>
<option value="ps4">プレステ4</option>
<option value="gb">ゲームボーイ</option>
</select>

wii_u,Wii U
ps4,プレステ4
gb,ゲームボーイ

valueを抜き出す正規表現を考える
というわけでまず、optionのvalueと表示テキストを正規表現を使ってきれいに抜き出しましょう。
valueは次のようなパターンになっています。

「value=、ダブルクオート、英数字またはアンダースコアが1文字以上、ダブルクオート」

これを正規表現で表すとどうなるでしょうか？

< ポイント：+の使い方 >
「直前の文字が 1文字以上 」を表す場合は + というメタ文字（量指定子）を使います。

「英数字またはアンダースコア」は [a-z0-9_] のように [ ] と - を使って書けます（第1回の記事を参照）。

よって value="[a-z0-9_]+" のように書けばvalueの部分にマッチさせることができます（[a-z0-9_]+ 以外はメタ文字でない、ただの文字です）。
Rubularを使って確認してみましょう。



< 正規表現の練習に最適！ >
「Scriptular」(JS向けの動作確認サイト) => https://scriptular.com/

< 参照 >
0. 「MDN公式リファレンス」=> https://developer.mozilla.org/ja/docs/Glossary/Regular_expression
1. 「初心者歓迎！手と目で覚える正規表現入門・その１「さまざまな形式の電話番号を検索しよう」」=> https://qiita.com/jnchito/items/893c887fbf19e17d3ff9
2. 「初心者歓迎！手と目で覚える正規表現入門・その２「微妙な違いを許容しつつ置換しよう」」=> https://qiita.com/jnchito/items/64c3fdc53766ac6f2008
3. 「初心者歓迎！手と目で覚える正規表現入門・その３「空白文字を自由自在に操ろう」」=> https://qiita.com/jnchito/items/6f0c885c1c4929092578


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

< 正規表現で日本語をチェックする >

.match()を使い正規表現をチェックします。
漢字・ひらがな・カタカナ以外の文字を含んでいたら「false」が返ります。

function ja2Bit ( str ) {
  return ( str.match(/^[\u30a0-\u30ff\u3040-\u309f\u3005-\u3006\u30e0-\u9fcf]+$/) )? true : false
}

ひらがな
\u3040-\u309f

カタカナ
\u30a0-\u30ff

CJK統合漢字
\u30e0-\u9fcf

々, 〆（記号）
\u3005-\u3006


javascript 日本語チェックです => https://qiita.com/graminume/items/2ac8dd9c32277fa9da64

正規表現で日本語が入るようにする方法 => https://arc-tech.hatenablog.com/entry/2021/01/20/105620

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
< 正規表現・逆引きリファレンス >

正規表現のパターンを定型文として利用する手もあり！

[JavaScript] 正規表現パターンサンプル集 => https://javascript.programmer-reference.com/js-regexp-sample/

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
< 正規表現で文字チェックを行う >


[JavaScript] 正規表現で文字チェックを行う => https://javascript.programmer-reference.com/js-string-regexp/

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

< 任意の文字を表す特殊文字の例 >
ドットは任意の一文字を表しますが、エスケープシーケンスを利用した表現に、種々の条件で一文字を表現するエスケープシーケンスがあります。

表現	制御コードの意味
\a	ベル文字
\cX	Ctrl + X（Xは任意の文字）
\n	改行コード（Line Feed）
\r	改行コード（Carriage Return）
\f	改ページ
\R	すべての改行コード（「\n|\r|\n\r」と同義）
\t	タブ
\v	垂直タブ
\s	空白文字（半角スペース、\t、\n、\r、\f）すべての文字。( |\t|\n|\r|\f)と同義
\S	空白文字以外のすべての文字
\d	数字。[0-9]と同義
\D	数字以外の文字列。[^0-9]と同義
\w	すべてのアルファベットとアンダースコアのうち任意の一文字。[a-zA-Z0-9_]と同義
\W	すべてのアルファベットとアンダースコア以外の１文字[^a-zA-Z0-9_]と同義
\l	すべての半角英小文字のうち１文字
\L	すべての半角英小文字の以外の文字１文字（英大文字、数字、全角文字など含む）
\u	すべての半角英大文字のうち１文字
\U	すべての半角英大文字以外の１文字（英小文字、数字、全角文字など含む）
\0	NULL文字（0の後に数字を続けると、８進数を表す数字を表すエスケープシーケンスとなるので注意）


正規表現：ドット「.」の意味と使い方 => https://www-creators.com/archives/3780

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

< 量指定子の種類 >

文字の繰り返しを表す量指定子も、必要に応じて使い分けることで、目的の表現を達成できます。

表現	意味
.	改行（\n、\r）を除くすべての文字
^	行頭の位置（シングルラインモード：行頭、マルチライン：文章の頭）
$	行末の位置
A|B	「|」の左右の文字列のいずれか（A, Bのいずれか）
\X	直後のメタ文字Xをエスケープする
[X]	文字クラス。カッコ内に指定した文字のうち、いずれかの一文字
[X-Y]	文字クラス内のハイフンは、文字の文字コード上の範囲を指定できる
[^X]	否定の文字クラス。カッコ内で指定した文字以外のいずれかの一文字
(X)	サブパターン。カッコ内のパターンにマッチした文字列を後方参照できる。ネスト可能。
{Num}	量指定子。直前のパターンが何回連続するかをNumで指定。
※「量指定子」セクションを参照

正規表現：ドット「.」の意味と使い方 => https://www-creators.com/archives/3780

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

< 文字列に対するバリデーション >

「1文字以上20文字以内」
パターン① => /^[\D\d]{1,20}$/
パターン② => /^.{1,20}$/
パターン③ => /^[\s\S]{1,20}$/ => 改行を含む文字列とマッチする！！

< 改行を含む任意の文字列とマッチさせる >
正規表現において、任意の文字列にマッチさせる場合、よく『.*』を使用する。
しかし『.』は「改行以外の文字とマッチ」なので、『.*』は改行を含むとマッチしなくなる。

改行を含む文字列とマッチさせたい場合、『[\s\S]*』を使用すると良い。

\s、\Sの意味は下記の通りであるため、改行を含む全ての文字列とマッチする。
\s → 任意の空白文字とマッチ（『[ \t\n\r\f\v]』と同等）
\S → 任意の非空白文字とマッチ（『[^ \t\n\r\f\v]』と同等）



[正規表現] 改行を含む任意の文字列とマッチさせる
https://w.atwiki.jp/fumiduki1985/pages/244.html#:~:text=%E6%94%B9%E8%A1%8C%E3%82%92%E5%90%AB%E3%82%80%E6%96%87%E5%AD%97%E5%88%97,%E6%96%87%E5%AD%97%E5%88%97%E3%81%A8%E3%83%9E%E3%83%83%E3%83%81%E3%81%99%E3%82%8B%E3%80%82

JavaScriptで正規表現（文字列制限編） => https://qiita.com/hrdaya/items/2cd5cc19cae35061225c

ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー

RegExp.prototype.test()
test() メソッドは、正規表現と指定された文字列の一致を調べるための検索を実行します。 true または false を返します。

< パターン1 >
let inputtodo = 'ロボ玉試作1号機ロボ玉試作2号機ロボ玉試作3号機の開発'
let inputtodo2 = 'ロボ玉試作2号機'
let inputtodo3 = 'Neo ロボ玉'

let pattern = /^[\D\d]{1,20}$/

console.log(pattern.test(inputtodo))
console.log(pattern.test(inputtodo2))
console.log(pattern.test(inputtodo3))


< パターン2 >
let inputtodo = 'ロボ玉試作1号機ロボ玉試作2号機ロボ玉試作3号機の開発'
let inputtodo2 = 'ロボ玉試作2号機'
let inputtodo3 = 'Neo ロボ玉'

let pattern = /^[\s\S\d]{1,20}$/

console.log(pattern.test(inputtodo))
console.log(pattern.test(inputtodo2))
console.log(pattern.test(inputtodo3))


初心者歓迎！手と目で覚える正規表現入門・その３「空白文字を自由自在に操ろう」 => https://qiita.com/jnchito/items/6f0c885c1c4929092578

「MDN公式リファレンス」RegExp.prototype.test() => https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/RegExp/test

【JavaScript入門】4つのパターンで理解する正規表現の使い方まとめ！ => https://www.sejuku.net/blog/20973

javascript 正規表現 数字　10文字以内 => https://teratail.com/questions/158480


ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー
< 基本的な正規表現一覧 >


基本的な正規表現一覧 => https://murashun.jp/article/programming/regular-expression.html
ーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーーー


< アンカー >
文字列の先頭や末尾に特定の文字がある文字列も表現できます。

アンカー	意味
^pattern	文字列の先頭にpatternがある文字列に一致
pattern$	文字列の末尾にpatternがある文字列に一致


< キャプション >
マッチしたい文字列の一部を再利用する場合にはキャプションという機能を使うことで達成出来ます。

たとえば#や$で囲まれた文字をマッチしたいときには

([#$]).+\1
とすることで、#neko#や$neko$に一致します。つまりキャプチャは()で囲ったところに出現した文字をキャプチャし\1という変数に入れてマッチを行うという機能になります。

キャプチャは複数使うことができます。例えば

(a)(b)c(\2)(\1)
であればabcbaという文字列に一致します。キャプチャは()で囲った順番で変数\1,\2,\3,...と代入されます。

キャプチャされるのを抑制する場合には(?:pattern)とします。



正規表現チートシート => https://qiita.com/tossh/items/635aea9a529b9deb3038
