<?php

// プログラムを強制終了させたいときに、役立ちます！

echo 'プログラム起動' . "\n";
 
exit('プログラムを強制的に終了します');

// 引数を指定した場合には画面に文字列を出力することができます => 強制終了させて、エラーメッセージなどを表示させられる！
 
echo 'この部分は出力されない・・・' . "\n";

// [ 実行結果 ]
// プログラム起動
// プログラムを強制的に終了します

// CLI で $? => True

// $? => True => 正常終了扱い



$value = 12;

$value = 25;

// echo $value . "\n";
 
if ($value < 20){
    // 0 = 正常終了
    exit(0);

    // 正常終了
    // exit;
    // exit();
    // exit(0);


    // CLI で $? => True


} else {
    // 1以上 = 異常終了
    exit(7);

    // エラーコードつきの終了
    // exit(1);

    // CLI で $? => False
}




// ステータスを指定する処理


// 【PHP入門】プログラムを終了する方法(exit/die) から引用する
// https://www.sejuku.net/blog/23857

//ファイル読み込み処理
function FileRead($pass){

    //ファイルオープン
    if (!fopen($pass, 'r')){
        echo "ファイル[{$pass}]を正常に読み込めません". "\n";
        return 1;
    }

    /* 成功時の処理・・・ */
}

//ファイルパスを指定して関数を呼び出す
$file = 'sample/pass/sample-file.txt';
$ret = FileRead($file);

//ステータスが0以外だったら終了処理
if ($ret != 0){
    echo "異常終了：[{$ret}]". "\n";
    exit($ret);
}



// < die() と exit() の違い >

// die関数は、exit関数と同じくメッセージを出力してプログラムを終了するときに使用します。

// die関数もexit関数も言語仕様的に違いはありません。したがってdieの記述方法はexitと同じです。

// die() = exit()

// die => exit と同等

    // この言語構造は、exit() と同等です。


    // メッセージを出力し、現在のスクリプトを終了する



// exit — メッセージを出力し、現在のスクリプトを終了する

    // 説明 ¶

        // exit(string $status = ?): void

        // exit(int $status): void


        // スクリプトの実行を終了します。 シャットダウン関数 や オブジェクトのデストラクタ は、exit がコールされた場合にも実行されます。

        // exit は言語構造です。 status を指定しない場合は括弧なしでコールできます。


    // パラメータ ¶

        // status
        // status が文字列の場合は、この関数は終了直前に status を表示します。

        // status が int の場合は その値が終了ステータスとして使われ、表示はされません。終了ステータスは 0 から 254 までの値でなければなりません。
        
        // 終了ステータス 255 は PHP に予約されており、使用してはいけません。ステータス 0 は、 プログラムを正常終了させる際に使用します。


    // 戻り値 ¶
        
        // 値を返しません。




// PHP関数die()の使い方

    // 上記の通りスクリプトを途中で、強制的に終了する事ができるので、

    // ・処理は想定された関数が実行されているのか？
    
    // ・if文の条件は想定通り満たされているのか？

    // こんな事が簡単に確認できます。















